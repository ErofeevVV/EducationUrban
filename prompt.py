# Типы данных:

int_ = 1    #целые числа
print(int_)
print(type(int_))
float_ = 2.3     #дробные (вещественные) числа
print(float_)
print(type(float_))
complex_ = complex(5)   #комплексные числа
print(complex_)
print(type(complex_))
bool_ = True    #булевые значения - принимают значения True или False
print(bool_)
print(type(bool_))
str_ = 'текст'  #строчный текст
print(str_)
print(type(str_))
list_ = [1, 2, 3]   #список - хранит различные типы данных, изменяемый объект
print(list_)
print(type(list_))
tuple_ = (1, 2, 3, 5, 4, 'green', True)   #кортеж - неизменяемый список
print(tuple_)
print(type(tuple_))
dict_ = {'name1': 123, 'name2': 456}    #словарь - список, где информация храниться парами: ключ-зачение (ключ - неизменяемый объект)
print(dict_)
print(type(dict_))

# Математические операции:

# ** - возведение в степень, операция возможна для типов int, float, complex
a = 2.5 ** 3
print(a)
# % - деление по модулю (получение остатка), операция возможна для типов int, float
a = 15.32 % 7
print(a)
# // - целочисленное деление (дробная часть отбрасывается), операция возможна для типов int, float
a = 17 // 5
print(a)
# / - деление, операция возможна для типов int, float
a = 17 / 5
print(a)
# * - умножение, операция возможна для типов int, float, complex, str, list, tuple (в случаях str, list, tuple - репликация)
# !!! возможно умножить текст, список и т.д., но не возможно умножить на них !!!
a = 2.6 * 7
b = 'text' * 3
print(a, b)
# - вычитание, операция возможна для типов int, float, complex
a = 5.8 - 1.2
print(a)
# + - сложение, операция возможна для типов int, float, complex, str, list, tuple (в случаях str, list, tuple - конкатенация)
a = 5.9 + 11
b = 'text' + 'text1'
print(a, b)

# Методы

# .upper - перевод всех букв в верхний регистр
print('text'.upper())
# .lower - перевод всех букв в нижний регистр
print('TEXT'.lower())
# .replace - замена символов
print('text'.replace('t', 'v'))
# len() - показать количество символов в введеном поле
print(len('text'))
# Метод извлечения среза [0:0:0], метод применим к типам str, list, dict.
# В [] указывается 1-ая цифра - начало среза, 2-ая цифра - конец среза (ограничение), 3-яя цифра - шаг
a = [5, 10, 15, 20, 25, 30, 35, 40]
print(a[2:5:2])
# .append() - метод для типа list, который добавляет элемент в конец списка
a = [1, 2, 3]
a.append(4)
print(a)
# .extend() - метод для типа list, который добавляет каждый символ как элемент списка, или добавляет список
a = [1, 2, 3]
a.extend([4, 5])
print(a)
# .remove() - метод для типа list, который удаляет выбранный элемент из списка
a = [1, 2, 3, 4, 5]
a.remove(4)
print(a)
# проверка на наличие/отсутствие значения в списке
a = [1, 2, 3, 4, 5]
print(4 in a)   # наличие значения
print(6 not in a)   # отсутствие значения
# .pop - метод извлечения значения из списка по его индексу
a = [1, 2, 3, 4, 5]
b = a.pop(3)
print(a)
print(b)

# Методы для типа словарь (dict)
a = {'name1': 1,
     'name2': 2,
     'name3': 3}
# обращение к значению:
print(a['name1'])
# изменение значения:
a['name2'] = 4
print(a)
# создание пары ключ/значение:
a['name4'] = 4
print(a)
# удаление пары ключ/значение:
del a['name3']
print(a)
# добавление (обновление) пары ключ/значение:
a.update({'name1': 6,
          'name7': 7})
print(a)
# .get() - возвращение значения по указанному ключу:
print(a.get('name4'))
# .pop() - извлечение пары ключ/значение из словаря
# .keys() - метод создания списка ключей
print(a.keys())
# .values() - метод создания списка значений
print(a.values())
# .items() - метод создания списка пар ключ/значение
print(a.items())

